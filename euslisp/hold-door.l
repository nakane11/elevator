(require :pr2-interface "package://pr2eus/pr2-interface.l")
(ros::roseus-add-msgs "jsk_recognition_msgs")
(ros::roseus-add-msgs "geometry_msgs")

(defun hold-door ()
  (send *ri* :angle-vector #f(50.2209 -6.54136 0.405612 36.0144 -39.8879 196.482 -48.175 -41.5922 -6.5557 62.9917 -89.2749 -121.542 -110.49 -105.675 12.3937 2.4067 -21.2682))
  (send *ri* :wait-interpolation)
)

(defun release-door ()
  (send *ri* :angle-vector #f(50.2209 -6.13284 2.65459 50.2644 -80.076 142.627 -47.7512 -35.8786 -6.5557 62.8415 -89.2749 -121.542 -110.537 -105.675 12.3937 -40 9))


  (send *ri* :angle-vector #f(50.2209 -4.99279 17.0257 64.7258 -112.533 125.67 -45.4902 -28.2678 -6.5842 62.7736 -89.2749 -121.542 -116.625 -105.675 12.3937 -20 6))

  (send *ri* :angle-vector #f(50.2209 7.828 61.5157 64.7166 -120.629 112.883 -56.9076 35.2308 -4.73638 70.1555 -89.4494 -121.542 -116.804 -109.334 12.4386 0 0))
  )

(defun wait-people-in-elevator (num)
  (ros::ros-info "wait people in elevator...")
  (while t
    (ros::spin-once)
    (let* ((msg (one-shot-subscribe "/move_inside_elevator/cluster_point_indices_decomposer/boxes" jsk_recognition_msgs::BoundingBoxArray))
           (boxes (send msg :boxes)) (people 0))
      (dolist (box boxes)
        (let ((pose (send box :pose)) (dimensions (send box :dimensions)))
          (setq height (+ (send (send pose :position) :z)
                          (/ (send dimensions :z) 2.0)))
          (setq ratio (/ (+ (/ (send dimensions :z) (send dimensions :x)) (/ (send dimensions :z) (send dimensions :x))) 2))
          (ros::ros-info (format nil "height:~A ratio:~A" height ratio))
          (when (and (> height 1.1) (> ratio 1.2))
            (incf people))))
      (ros::ros-info (format nil "find ~A people" people))
      (if (>= people num)
          (return))
      )
    )
  )

(defun find-space (center-x center-y)
  (let* ((msg (one-shot-subscribe "/elevator_placement/placement_finder/output/poses" geometry_msgs::PoseArray))
         (poses (send msg :poses)))
    (when (null poses)
      (return-from find-space (find-space (center-x center-y))))
    (sort poses #'(lambda (x y)
                    (let* ((x-pos (send x :position)) (y-pos (send y :position))
                           (x-dist (+ (abs (- (send x-pos :x) center-x)) (abs (- (send x-pos :y) center-y))))
                           (y-dist (+ (abs (- (send y-pos :x) center-x)) (abs (- (send y-pos :y) center-y)))))
                      (>= x-dist y-dist))))
    (elt pose 0))
  )

(setq *elevator-6f-inside-center* (make-cascoords :pos (float-vector 3917.656 -30975.841 19998.982) :rpy (float-vector 1.583 -0.0 0.0)))
(setq *elevator-6f-inside-left* (make-cascoords :pos (float-vector 3254.766 -31112.623 20000.97) :rpy (float-vector 1.594 0.002 0.0))) 

(defun move-inside-elevator ()
  (send *ri* :move-to *elevator-6f-inside-center*)
  (send *ri* :move-to *elevator-6f-inside-left*)
  ;; (setq initial-occupancy (one-shot-subscribe "/placement_finder/output/occupancy" std_msgs::Float32))
  (hold-door)
  (send *pr2* :angle-vector (send *ri* :state :potentio-vector))
  (send *pr2* :head :angle-vector #f(-64.7933 12.354))
  (send *ri* :angle-vector (send *pr2* :angle-vector))
  (send *ri* :wait-interpolation)
  ;; check people in
  (wait-people-in-elevator 1)
  (release-door)
  )


;; (setq space (find-space 3.75 -31.1))
;; (send *ri* :move-to (ros::tf-pose->coords space) :frame-id "map")
