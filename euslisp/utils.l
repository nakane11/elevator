(require :pr2-interface "package://pr2eus/pr2-interface.l")
(load "package://jsk_maps/src/eng8-scene.l")
(load "package://elevator_move_base_pr2/src/utils.l")


(defvar *floors*)
(defvar *scene*)
(defvar *tfl*)

(defun initialize ()
  (pr2-init)
  (setq *tfl* (instance ros::transform-listener :init))
  (setq *scene* (make-eng8-scene))
)

(defun check-elevator-needed (goal)
  (ros::ros-info "Checking if elevator is needed...")
  (update-robot-position)
  (let* ((cur-floor (check-current-floor *scene* *tfl*))
         (target-floor (send *scene* :current-floor goal))
         up/down)
    (ros::ros-info
     (format nil
             "cur-floor: ~A, target-floor: ~A"
             cur-floor target-floor))
    (setq up/down (cond ((send *scene* :floor< target-floor cur-floor) "down")
                        ((send *scene* :floor< cur-floor target-floor) "up")
                        (t nil)))
    (ros::ros-info (format nil "up/down: ~A" up/down))
    (list cur-floor target-floor up/down)
    ))

(defun wait-for-destination ()
  (setq last-update (ros::time-now))
  (ros::ros-info "waiting for destination")
  (setq *speech* "")
  (setq ret nil)
  (while (null ret)
    (ros::spin-once)
    (cond
       ((substringp "六階の部屋" *speech*)
	(send *ri* :speak-jp "ろくいちまるに案内します" :wait t)
	(ros::ros-info "goal: /eng8/6f/room610-base")
	(setq ret (send *scene* :spot "/eng8/6f/room610-base")))
       ((substringp "一階" *speech*)
	(send *ri* :speak-jp "パンフレットの前に案内します" :wait t)
	(ros::ros-info "goal: /eng8/1f/pamphlet-front")
	(setq ret (send *scene* :spot "/eng8/1f/pamphlet-front")))
       ((substringp "事務室" *speech*)
	(send *ri* :speak-jp "事務室に案内します" :wait t)
	(ros::ros-info "goal: /eng8/1f/student-affairs")
	(setq ret (send *scene* :spot "/eng8/1f/student-affairs")))
       (t
	(unless (string-equal *speech* "")
	  (send *ri* :speak-jp "すみません。聞き取れませんでした" :wait t)
	  (setq *speech* ""))
	(setq ret nil))
       )
    (when (> (send (ros::time- (ros::time-now) last-update) :to-sec) 30)
      (send *ri* :speak-jp "目的地を教えて下さい" :wait t)
      (setq last-update (ros::time-now))))
    (ros::ros-info (format nil "goal: ~A" ret))
  ret)

(defun wait-for-arrival ()
  (ros::ros-info "waiting for arrival")
  (setq *speech* "")
  (setq ret nil)
  (while (null ret)
    (ros::spin-once)
    (setq ret (substringp "到着" *speech*))))
